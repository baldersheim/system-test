# Copyright Vespa.ai. All rights reserved.
schema test {
    document test {
        field id type int {
            indexing: attribute | summary
        }
        field long type long {
            indexing: attribute | summary
        }
        field longarray type array<long> {
            indexing: attribute | summary
        }
        field intarray type array<int> {
            indexing: attribute | summary
        }
        field stringarray type array<string> {
            indexing: attribute | summary
        }
        field parent_ref type reference<parent> {
            indexing: attribute | summary
        }
        field fs_longarray type array<long> {
            indexing: attribute | summary
            attribute: fast-search
        }
    }

    import field parent_ref.array as parent_array {}

    rank-profile longarray {
        function longarray_expr() {
            expression: reduce( tensorFromLabels(attribute(longarray), x) * tensorFromWeightedSet(query(weights), x), max)
        }
        first-phase {
            expression: longarray_expr / 10000
        }
    }

    rank-profile intarray {
        function intarray_expr() {
            expression: reduce( tensorFromLabels(attribute(intarray), x) * tensorFromWeightedSet(query(weights), x), max)
        }
        first-phase {
            expression: intarray_expr / 10000
        }
    }

    rank-profile argument_reorder {
        function argument_reorder_expr() {
            expression: reduce(tensorFromWeightedSet(query(weights), x) * tensorFromLabels(attribute(longarray),x), max)
        }
        first-phase {
            expression: argument_reorder_expr / 10000
        }
    }

    rank-profile div {
        function div_expr() {
            expression: reduce( tensorFromLabels(attribute(longarray), x) * tensorFromWeightedSet(query(weights), x), max) / 10000
        }
        first-phase {
            expression: div_expr
        }
    }

    rank-profile long {
        function long_expr() {
            expression: reduce( tensorFromLabels(attribute(long), x) * tensorFromWeightedSet(query(weights), x), max)
        }
        first-phase {
            expression: long_expr / 10000
        }
    }

    rank-profile stringarray {
        function stringarray_expr() {
            expression: reduce( tensorFromLabels(attribute(stringarray), x) * tensorFromWeightedSet(query(weights), x), max)
        }
        first-phase {
            expression: stringarray_expr / 10000
        }
    }

    rank-profile parentarray {
        function parentarray_expr() {
            expression: reduce( tensorFromLabels(attribute(parent_array), x) * tensorFromWeightedSet(query(weights), x), max)
        }
        first-phase {
            expression: parentarray_expr / 10000
        }
    }

    rank-profile fs_longarray {
        function fs_longarray_expr() {
            expression: reduce( tensorFromLabels(attribute(fs_longarray), x) * tensorFromWeightedSet(query(weights), x), max)
        }
        first-phase {
            expression: fs_longarray_expr / 10000
        }
    }

}
