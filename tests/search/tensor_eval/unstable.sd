# Copyright Vespa.ai. All rights reserved.

schema unstable {
  document unstable {
    field id type int {
      indexing: attribute | summary
    }
    field title type string {
      indexing: index | summary
    }
    field mybytes type tensor<int8>(tag{}) {
      indexing: attribute
    }
    field myshorts type tensor<bfloat16>(tag{}) {
      indexing: attribute
    }
    field myfloats type tensor<float>(tag{}) {
      indexing: attribute
    }
    field mydoubles type tensor<double>(tag{}) {
      indexing: attribute
    }
  }
  constant model {
    type: tensor<int8>(age{},sex{},tag{})
    file: search/model.json
  }
  rank-profile default {
    inputs {
      query(age) tensor(age{})
      query(sex) tensor(sex{})
    }
    first-phase {
      expression {
        sum(query(age)*query(sex)*attribute(mydoubles)*constant(model))
      }
      rank-score-drop-limit: 1.0
    }
  }
  rank-profile w8bits inherits default {
    first-phase {
      expression {
        sum(query(age)*query(sex)*attribute(mybytes)*constant(model))
      }
      rank-score-drop-limit: 1.0
    }
    function output_tensor() {
      expression: attribute(mybytes)
    }
    summary-features: output_tensor
  }
  rank-profile w16bits inherits default {
    first-phase {
      expression {
        sum(query(age)*query(sex)*attribute(myshorts)*constant(model))
      }
      rank-score-drop-limit: 1.0
    }
    function output_tensor() {
      expression: attribute(myshorts)
    }
    summary-features: output_tensor
  }
  rank-profile w32bits inherits default {
    first-phase {
      expression {
        sum(query(age)*query(sex)*attribute(myfloats)*constant(model))
      }
      rank-score-drop-limit: 1.0
    }
  }
}
