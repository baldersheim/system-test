# Copyright Vespa.ai. All rights reserved.

schema ad {
  document ad {
    field campaign_ref type reference<campaign> {
      indexing: attribute | summary
    }
    field filter type int {
      indexing: attribute | summary
      attribute: fast-search
    }
    field text type string {
      indexing: index | summary
    }
  }
  import field campaign_ref.cpos as pos {}
  rank-profile default {
    inputs {
      query(qpos_double) tensor<double>(x[2])
      query(qpos_float) tensor<float>(x[2])
    }
    function euclidean_distance_qpos_double() {
      expression: sqrt(sum(join(query(qpos_double), attribute(pos), f(x,y)((x-y)*(x-y)))))
    }
    function euclidean_distance_qpos_float() {
      expression: sqrt(sum(join(query(qpos_float), attribute(pos), f(x,y)((x-y)*(x-y)))))
    }
    first-phase {
      expression: 15 - distance(label,nns)
    }
    summary-features {
      euclidean_distance_qpos_double
      euclidean_distance_qpos_float
      distance(pos)
      distance(label,nns)
      closeness(pos)
      closeness(label,nns)
      rawScore(pos)
      itemRawScore(nns)
    }
  }
  rank-profile combined {
    inputs {
      query(qpos_double) tensor<double>(x[2])
      query(qpos_float) tensor<float>(x[2])
    }
    first-phase {
      expression: 10*closeness(label,nns) + fieldMatch(text).earliness
    }
    summary-features {
      distance(pos)
      distance(label,nns)
      closeness(pos)
      closeness(label,nns)
      rawScore(pos)
      itemRawScore(nns)
      fieldMatch(text).earliness
    }
  }
}
