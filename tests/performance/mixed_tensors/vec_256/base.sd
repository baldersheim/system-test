# Copyright Vespa.ai. All rights reserved.
schema base {
  document base {
    field id type int {
      indexing: attribute | summary
    }
  }
  rank-profile base_profile {
    inputs {
      query(q_cat_keys) tensor<float>(cat{})
      query(q_cat_scores) tensor<float>(cat{})
      query(q_model) tensor<float>(model{})
      query(q_user_vec) tensor<float>(vec[256])
    }
    function inline max_score() {
      expression: reduce( categories_scaled_scores, max )
    }
    # result: tensor(cat{}) / tensor(model{},cat{}),
    #         where all categories scores are scaled by query(q_cat_scores).
    function inline categories_scaled_scores() {
      expression: categories_scores * query(q_cat_scores)
    }
    # result: tensor(cat{}) / tensor(model{},cat{}),
    #         where each vector is reduced (with sum) and an exp function is applied on the result.
    function inline categories_scores() {
      expression: map ( reduce( categories_raw_scores, sum, vec ), f(x)(1.0 / (1.0 + exp(0.0 - x)) ) )
    }
    # result: tensor(cat{},vec[256]) / tensor(model{},cat{},vec[256]),
    #         where all vectors are multiplied with query(q_user_vec).
    function inline categories_raw_scores() {
      expression: join ( select_categories, query(q_user_vec), f(x,y)(x*y) )
    }
    # result: tensor(cat{},vec[256]) / tensor(model{},cat{},vec[256]),
    #         where a subset of the categories are selected based on query(q_cat_keys).
    function inline select_categories() {
      expression: query(q_cat_keys) * select_model
    }
  }
  document-summary minimal {
    summary id {}
  }
}
