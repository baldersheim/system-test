# Copyright Vespa.ai. All rights reserved.
schema test {
    document test {
        field id type int {
            indexing: attribute | summary
        }
        field longarray type array<long> {
            indexing: attribute | summary
        }
        field strten type tensor(x{}) {
            indexing: attribute
        }
    }
    field strtendirect type tensor(x{}) {
        indexing: input strten | attribute
        attribute: fast-rank
    }

    document-summary id {
        summary id {
            source: id
        }
    }

    rank-profile with_replacement {
        function calc() {
            expression {
                reduce(
                    tensorFromLabels(attribute(longarray), x)
                    *
                    tensorFromWeightedSet(query(weights), x),
                    max
                )
            }
        }
        first-phase {
            expression: calc / 10000
        }
    }

    rank-profile without_replacement {
        function calc() {
            expression {
                reduce(
                    tensorFromLabels(attribute(longarray), x)
                    *
                    tensorFromWeightedSet(query(weights), x),
                    max
                ) / 10000
            }
        }
        first-phase {
            expression: calc
        }
    }

    rank-profile halfmodern {
        function calc() {
            expression {
                reduce(
                    attribute(strten)
                    *
                    tensorFromWeightedSet(query(weights), x),
                    max
                ) / 10000
            }
        }
        first-phase {
            expression: calc
        }
    }

    rank-profile halfmoderndirect {
        function calc() {
            expression {
                reduce(
                    attribute(strtendirect)
                    *
                    tensorFromWeightedSet(query(weights), x),
                    max
                ) / 10000
            }
        }
        first-phase {
            expression: calc
        }
    }

    rank-profile modern {
        inputs {
            query(qwten) tensor(x{})
        }
        function calc() {
            expression {
                reduce(
                    attribute(strtendirect) * query(qwten),
                    max
                ) / 10000
            }
        }
        first-phase {
            expression: calc
        }
    }
}
