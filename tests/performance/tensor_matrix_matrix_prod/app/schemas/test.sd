# Copyright Vespa.ai. All rights reserved.
schema test {
    document test {

        field id type int {
            indexing: summary | attribute
        }
        field float_rand type float {
            indexing: summary | attribute
        }
        field double_rand type double {
            indexing: summary | attribute
        }
    }

    document-summary no_summary {
        summary id {
            source: id
        }
    }

    constant vector_512_float {
        file: search/vector_512.json
        type: tensor<float>(d0[512])
    }
    constant matrix_256x512_float {
        file: search/matrix_256x512.json
        type: tensor<float>(d0[256],d1[512])
    }
    constant matrix_512x256_float {
        file: search/matrix_512x256.json
        type: tensor<float>(d0[512],d1[256])
    }
    constant matrix_256x1024_float {
        file: search/matrix_256x1024.json
        type: tensor<float>(d0[256],d1[1024])
    }
    constant matrix_256x512_double {
        file: search/matrix_256x512.json
        type: tensor<double>(d0[256],d1[512])
    }
    constant matrix_256x256_float {
        file: search/matrix_256x256.json
        type: tensor<float>(d0[256],d1[256])
    }

    rank-profile vector_vector_512_float {
        first-phase { expression: sum(join(attribute(float_rand) * constant(vector_512_float), constant(vector_512_float), f(a,b)(a * b))) }
    }

    rank-profile vector_matrix_512_float_inner {
        first-phase { expression: sum(reduce(join(rename(attribute(float_rand) * constant(vector_512_float), d0, d1), constant(matrix_256x512_float), f(a,b)(a * b)), sum, d1)) }
    }

    rank-profile vector_matrix_512_float_outer {
        first-phase { expression: sum(reduce(join(attribute(float_rand) * constant(vector_512_float), constant(matrix_512x256_float), f(a,b)(a * b)), sum, d0)) }
    }

    # inner x inner (d0,d2 x d1,d2)
    rank-profile matrix_product_512_float {
        first-phase { expression: sum(reduce(join(rename(attribute(float_rand) * constant(matrix_256x512_float), d1, d2), rename(constant(matrix_256x512_float), (d0,d1), (d1,d2)), f(a,b)(a * b)), sum, d2)) }
    }

    # inner x outer (d0,d1 x d1,d2)
    rank-profile matrix_product_512_float_inner_outer {
        first-phase { expression: sum(reduce(join(attribute(float_rand) * constant(matrix_256x512_float), rename(constant(matrix_512x256_float), (d0,d1), (d1,d2)), f(a,b)(a * b)), sum, d1)) }
    }

    # outer x outer (d0,d2 x d0,d1)
    rank-profile matrix_product_512_float_outer_outer {
        first-phase { expression: sum(reduce(join(rename(attribute(float_rand) * constant(matrix_512x256_float), d1, d2), constant(matrix_512x256_float), f(a,b)(a * b)), sum, d0)) }
    }

    rank-profile matrix_product_1024_float {
        first-phase { expression: sum(reduce(join(rename(attribute(float_rand) * constant(matrix_256x1024_float), d1, d2), rename(constant(matrix_256x1024_float), (d0,d1), (d1,d2)), f(a,b)(a * b)), sum, d2)) }
    }

    rank-profile matrix_product_512_double {
        first-phase { expression: sum(reduce(join(rename(attribute(double_rand) * constant(matrix_256x512_double), d1, d2), rename(constant(matrix_256x512_double), (d0,d1), (d1,d2)), f(a,b)(a * b)), sum, d2)) }
    }

    rank-profile gemm_512_float {
        first-phase { expression: sum(join(reduce(join(rename(attribute(float_rand) * constant(matrix_256x512_float), d1, d2), rename(constant(matrix_256x512_float), (d0,d1), (d1,d2)), f(a,b)(a * b)), sum, d2) * 1.1, constant(matrix_256x256_float) * 1.2, f(a,b)(a+b))) }
    }

    rank-profile gemm_512_float_inline_join {
        first-phase { expression: sum(join(reduce(join(rename(attribute(float_rand) * constant(matrix_256x512_float), d1, d2), rename(constant(matrix_256x512_float), (d0,d1), (d1,d2)), f(a,b)(a * b)), sum, d2), constant(matrix_256x256_float), f(a,b)(1.1*a + 1.2*b))) }
    }

}

